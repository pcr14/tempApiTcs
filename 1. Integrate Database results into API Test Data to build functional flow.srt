1
00:00:01,170 --> 00:00:01,860
Welcome back.

2
00:00:02,250 --> 00:00:07,710
So let's come back to our API test, what we have written in our previous sections.

3
00:00:08,250 --> 00:00:11,690
So ad book Paillard, this is the method, right?

4
00:00:11,880 --> 00:00:13,680
So what exactly this method is doing?

5
00:00:13,920 --> 00:00:19,080
So this matter is sending one dictionary back to your work test, isn't it?

6
00:00:19,110 --> 00:00:20,430
This is a dictionary, right?

7
00:00:20,700 --> 00:00:24,390
So you type of body and you'll see what it brings.

8
00:00:24,390 --> 00:00:26,580
It brings a dictionary because that's the format.

9
00:00:27,300 --> 00:00:34,330
OK, so this is a python variable called study and once this dictionary variable reaches here.

10
00:00:35,130 --> 00:00:39,200
So when you're right, Jason equals to that dictionary automatically.

11
00:00:39,210 --> 00:00:46,110
Jason is very smart in converting that dictionary to actually do some format and it submits to your

12
00:00:46,110 --> 00:00:46,750
request.

13
00:00:46,950 --> 00:00:48,090
So that's the concept.

14
00:00:48,360 --> 00:00:53,100
OK, that will automatically taken by this Jason parameter.

15
00:00:53,670 --> 00:00:58,500
But ultimately you are writing one dictionary and giving it to you different value.

16
00:00:59,070 --> 00:01:01,680
OK, so if you read the official documentation.

17
00:01:03,620 --> 00:01:09,620
Here, instead of encoding the dictionary, basically, you can also pass it directly.

18
00:01:09,650 --> 00:01:10,420
That's what we did.

19
00:01:10,730 --> 00:01:13,500
So we directly passed the dictionary.

20
00:01:14,240 --> 00:01:21,160
So this is a dictionary we directly posted using the design parameter and it will be encoded automatically.

21
00:01:21,380 --> 00:01:29,660
So that means basically our our payload should be in decent format when you submit to the request.

22
00:01:29,840 --> 00:01:31,240
You see that that's a decent format.

23
00:01:31,520 --> 00:01:37,130
But here with the dictionary, we are submitting and this encoding is happening automatically right

24
00:01:37,550 --> 00:01:37,940
now.

25
00:01:39,090 --> 00:01:45,870
So our goal is to create this dictionary dynamically now, instead of hard coding the values here,

26
00:01:46,110 --> 00:01:48,920
these values want to come from database.

27
00:01:49,430 --> 00:01:56,940
OK, there could be a scenario in your life project where this input payload should be seeded from a

28
00:01:56,940 --> 00:01:57,560
database.

29
00:01:57,960 --> 00:01:59,650
It could be because of any scenario.

30
00:01:59,700 --> 00:01:59,970
Right.

31
00:02:00,210 --> 00:02:07,350
So if that is a requirement, mostly in backend projects, this API plus database will be commonly used

32
00:02:07,350 --> 00:02:08,680
as integrated software.

33
00:02:08,730 --> 00:02:08,970
Right.

34
00:02:09,420 --> 00:02:13,730
So if that is a requirement of getting the values from Debe, let's see how to do that.

35
00:02:15,240 --> 00:02:15,440
Right.

36
00:02:15,660 --> 00:02:22,230
So one thing what we understand here, ultimately, this is a big dictionary, so I will create one

37
00:02:22,590 --> 00:02:25,920
function again and I would call it as.

38
00:02:27,980 --> 00:02:32,720
Build paillard from DBE.

39
00:02:33,750 --> 00:02:38,140
OK, and here so we need to create one big study.

40
00:02:38,160 --> 00:02:39,900
So what I can do.

41
00:02:42,950 --> 00:02:49,660
I will first start with one empty dictionary ad, but this is one of the dictionary initializing, right?

42
00:02:49,970 --> 00:02:51,080
This has nothing in it.

43
00:02:51,350 --> 00:02:57,650
Now, our goal is to start feeding values as a key value base.

44
00:02:57,830 --> 00:03:03,320
OK, so you can start adding key value bits into your dictionary like this and body.

45
00:03:03,710 --> 00:03:05,180
And this is the key, right?

46
00:03:05,570 --> 00:03:09,800
You can say the name and the value.

47
00:03:10,400 --> 00:03:17,600
OK, so if you don't remember how to add values, key values to a dictionary, please.

48
00:03:17,660 --> 00:03:19,370
I taught my Python basic section.

49
00:03:19,380 --> 00:03:24,440
I have clearly explained there like how to create an updated study and add values into it.

50
00:03:24,710 --> 00:03:26,000
OK, I'm just adding all these.

51
00:03:26,000 --> 00:03:26,240
No.

52
00:03:27,370 --> 00:03:31,270
So the value here should be from database, so let's hold on that.

53
00:03:31,300 --> 00:03:38,170
Now let me prepare this case and body ISBN equals to.

54
00:03:40,460 --> 00:03:42,350
Hello, and let me create two more.

55
00:03:44,970 --> 00:03:48,000
It will be interesting, guys, just follow me and you will get it soon.

56
00:03:49,980 --> 00:03:53,690
So fast is all, and the last one is Arta.

57
00:03:57,100 --> 00:04:04,630
OK, so once you create like this at the end, you have to return the dictionary, the term.

58
00:04:06,330 --> 00:04:07,230
Her body.

59
00:04:10,470 --> 00:04:11,390
OK, miss.

60
00:04:15,590 --> 00:04:18,480
Could be rewritten as dictionary little.

61
00:04:18,580 --> 00:04:21,290
OK, you can say it like this, but that will.

62
00:04:22,010 --> 00:04:22,600
That's fine.

63
00:04:22,610 --> 00:04:23,660
You can have it like this.

64
00:04:23,960 --> 00:04:26,420
Do we have any other variable with that body here?

65
00:04:26,690 --> 00:04:26,980
No.

66
00:04:26,990 --> 00:04:27,190
Right.

67
00:04:27,340 --> 00:04:28,550
OK, then that should be fine.

68
00:04:30,140 --> 00:04:34,890
OK, so now our goal is to fit with the database values.

69
00:04:35,390 --> 00:04:35,750
Now.

70
00:04:37,400 --> 00:04:43,080
So here you have to first connect to your database and then give the query.

71
00:04:43,670 --> 00:04:46,640
So let's assume that we need the first Odegaard.

72
00:04:47,120 --> 00:04:53,240
So if you give this query select start from looks, this will return all the results.

73
00:04:53,240 --> 00:04:57,060
Right from that, you can use fetch one to get the first record.

74
00:04:57,500 --> 00:05:02,330
OK, so randomly you need to pick one record from your table and create decent.

75
00:05:03,580 --> 00:05:11,050
OK, so let's first form connection and have that equity, but instead I want to write us one letter

76
00:05:11,050 --> 00:05:11,550
like this.

77
00:05:12,010 --> 00:05:13,510
So get Querrey.

78
00:05:15,650 --> 00:05:19,890
So this matter should basically get me the record.

79
00:05:20,540 --> 00:05:21,650
That's what we need to do.

80
00:05:22,100 --> 00:05:24,860
OK, so this should get me the apple.

81
00:05:25,040 --> 00:05:32,840
So what exactly Regardful written, if you go back to your database validations, you'll see that when

82
00:05:32,870 --> 00:05:34,790
you look at one role will be written.

83
00:05:35,300 --> 00:05:36,730
That's nothing but a couple.

84
00:05:37,010 --> 00:05:37,340
Right.

85
00:05:37,640 --> 00:05:42,030
And when you do that, Rob Foster, the card will be written here in that Apple.

86
00:05:42,680 --> 00:05:49,200
Similarly, in our paillard find to assume that this is the double and Leitman method.

87
00:05:49,250 --> 00:05:56,420
So that should return you the to double so that you can smartly place like this BP of zero, so that

88
00:05:56,420 --> 00:06:02,570
from that table when you have zero, APM will be picked off one lesbian couple of two.

89
00:06:03,470 --> 00:06:04,580
This is how you need to feel.

90
00:06:05,030 --> 00:06:10,670
So now our key point here is to implement this method, which will give you the results.

91
00:06:11,830 --> 00:06:18,790
So you can let it get itself, create function, get committee, let's have it here all, you can buy

92
00:06:18,850 --> 00:06:21,070
it from your configurations.

93
00:06:21,130 --> 00:06:23,120
It's up to you from where you want to get it.

94
00:06:23,500 --> 00:06:26,260
So let me do one thing as this is Beyler related.

95
00:06:26,710 --> 00:06:28,690
Should be right there in.

96
00:06:31,520 --> 00:06:36,950
Where is that data, some configurations let's look at here, because here where we have all the data

97
00:06:36,950 --> 00:06:37,550
business, right.

98
00:06:38,310 --> 00:06:38,810
OK.

99
00:06:40,500 --> 00:06:41,400
Get committee.

100
00:06:45,540 --> 00:06:51,170
So first, you have to form the connection, so get connection is a method which will help you to create

101
00:06:51,180 --> 00:06:51,850
connection, right?

102
00:06:52,110 --> 00:06:57,170
So you blindly call that method and you'll get a connection as a return, as a connection object.

103
00:06:57,630 --> 00:07:01,170
So connection equals to get connection.

104
00:07:01,460 --> 00:07:06,210
OK, next step, you have to create a streamlined concert.

105
00:07:06,540 --> 00:07:10,110
So let's create that cursor and how that object.

106
00:07:12,010 --> 00:07:13,360
Now, you need to execute that.

107
00:07:13,780 --> 00:07:14,710
That's not.

108
00:07:16,090 --> 00:07:18,130
Execute and the query.

109
00:07:18,490 --> 00:07:25,510
So basically this query should not be hardcoded here because it clearly is a method which will create

110
00:07:25,510 --> 00:07:27,330
connection and it will execute query.

111
00:07:27,400 --> 00:07:28,570
It could be any query.

112
00:07:28,970 --> 00:07:34,750
OK, if you hardcourt, that means only you want to post API for test only can use that.

113
00:07:35,290 --> 00:07:42,690
OK, if all the best together should be able to use this get query method to hit query and to get results.

114
00:07:42,700 --> 00:07:42,940
Right.

115
00:07:43,210 --> 00:07:49,360
So let's do one thing I would query here and this query, we will drive it from our actual test.

116
00:07:49,670 --> 00:07:51,420
OK, that should not be hard coded here.

117
00:07:52,180 --> 00:07:52,840
So just follow.

118
00:07:52,840 --> 00:07:53,660
You will get it soon.

119
00:07:54,100 --> 00:07:57,790
So some query, I don't know that it will get executed.

120
00:07:58,150 --> 00:08:02,500
OK, so once you execute this, Kasota will hold all the results right.

121
00:08:02,740 --> 00:08:04,310
From all those results.

122
00:08:04,540 --> 00:08:11,440
Let's fix the first one because we need one Bellegarde so that you can prepare the descent and you will

123
00:08:11,440 --> 00:08:15,090
get that first regarding a row, which is nothing but tuple.

124
00:08:15,340 --> 00:08:19,930
OK, now let's return this double and that's on.

125
00:08:20,470 --> 00:08:22,890
And let's close the connection because our work is done.

126
00:08:23,200 --> 00:08:24,790
So let's not open multiple things.

127
00:08:25,000 --> 00:08:26,080
We open the connection.

128
00:08:26,080 --> 00:08:29,940
We closed because we got our first record tuple and we are returning it.

129
00:08:30,940 --> 00:08:31,410
Awesome.

130
00:08:31,900 --> 00:08:33,600
So right now, that is not going to here.

131
00:08:33,850 --> 00:08:35,000
Let's bring that soon.

132
00:08:36,010 --> 00:08:43,450
OK, now I will go back to post API example and we thought of calling a new method this time.

133
00:08:43,450 --> 00:08:43,720
Right.

134
00:08:44,290 --> 00:08:46,920
New method is a bit paillard from beby.

135
00:08:47,380 --> 00:08:50,440
OK, so let's use that method and the inside.

136
00:08:50,770 --> 00:08:52,140
Let's give our query.

137
00:08:52,630 --> 00:08:56,140
OK, I will define query variable here.

138
00:08:56,440 --> 00:08:57,660
What is our query variable.

139
00:08:58,600 --> 00:09:00,420
So this is the query we are interested.

140
00:09:00,460 --> 00:09:02,560
Right select to start from box.

141
00:09:05,060 --> 00:09:07,540
OK, and I will place this committee here.

142
00:09:08,690 --> 00:09:11,360
OK, now let's try to understand what's happening here.

143
00:09:12,080 --> 00:09:16,470
So this method will get executed and we are sending goriest parameter.

144
00:09:16,580 --> 00:09:18,470
Let's go inside and.

145
00:09:19,490 --> 00:09:27,500
Once we are inside, this great metal is expecting one day, so whatever quality you send from your

146
00:09:27,500 --> 00:09:34,220
method will fall here and from here we will capture and send it here because this mother is expecting

147
00:09:34,760 --> 00:09:36,500
a great quarry, OK?

148
00:09:37,130 --> 00:09:40,270
And this dead body is not in this glass.

149
00:09:40,280 --> 00:09:41,920
So that's why you are getting this error.

150
00:09:42,170 --> 00:09:43,550
So let's import that.

151
00:09:44,090 --> 00:09:48,200
So from which file we have written configurations, right?

152
00:09:48,890 --> 00:09:49,910
Utilities.

153
00:09:51,580 --> 00:09:53,380
Dark configurations.

154
00:09:55,560 --> 00:09:56,960
Import stuff.

155
00:09:58,140 --> 00:10:06,930
OK, now you see that that is gone, so the query, whatever you got from your test is being sent to

156
00:10:06,930 --> 00:10:11,130
your payload and from here it comes here and we are sending it to get perimeter.

157
00:10:11,400 --> 00:10:13,230
So that query will be sent here.

158
00:10:13,380 --> 00:10:15,180
And from here we are executing.

159
00:10:15,210 --> 00:10:16,670
So this is how we connected.

160
00:10:16,860 --> 00:10:22,830
You see that how it is connected to multiple flights so that this method is a unique and it's not hard

161
00:10:22,830 --> 00:10:23,130
coded.

162
00:10:23,130 --> 00:10:29,040
So anyone can use this method with their own queries for that particular test without hard coding.

163
00:10:29,730 --> 00:10:30,210
Awesome.

164
00:10:31,330 --> 00:10:35,900
OK, so this Rick Dunstable, you know what, I guess that's what we have seen, right?

165
00:10:35,920 --> 00:10:38,920
This will return the faster or fatal one.

166
00:10:39,400 --> 00:10:43,170
If you remember, we have that same video when we printed up.

167
00:10:43,450 --> 00:10:44,320
We got a couple.

168
00:10:44,530 --> 00:10:50,920
And now to either throw that law, when you said Roaf, zero in that first item will be picked.

169
00:10:51,320 --> 00:10:56,710
OK, now we will go to Paillard and add Bardy name.

170
00:10:57,040 --> 00:10:59,000
So book name is the first one.

171
00:10:59,020 --> 00:11:06,340
So in that double zero index is a book name so that we are sending instead of this and next I SBN in

172
00:11:06,340 --> 00:11:08,180
that first one.

173
00:11:08,800 --> 00:11:12,170
So first one is I guess being the second one is a third one is Orta.

174
00:11:12,790 --> 00:11:21,730
So first one is Espin and in that double whatever the second one is aisle and third one is Orta.

175
00:11:22,240 --> 00:11:24,520
So that's how we retrieve the results.

176
00:11:24,850 --> 00:11:29,250
And from dateable we will read one by one and we send to our dictionary.

177
00:11:29,470 --> 00:11:36,400
So basically here we just created one dictionary, ultimately one big study we created and we are sending

178
00:11:36,400 --> 00:11:38,650
this dictionary back to your test.

179
00:11:39,100 --> 00:11:40,370
That's what we did here as well.

180
00:11:41,080 --> 00:11:45,590
OK, so here we created this study, but we directly given all the values and we are sending it.

181
00:11:46,120 --> 00:11:53,340
So once you send your big study back to here, as I've shown, it has a mechanism to encode your dictionary

182
00:11:53,350 --> 00:11:55,280
back to you, Jason.

183
00:11:55,780 --> 00:11:56,230
All right.

184
00:11:56,240 --> 00:12:04,150
So this is how now I think you are building a pillar dynamically from the data.

185
00:12:04,230 --> 00:12:06,640
This isn't it looks interesting.

186
00:12:07,000 --> 00:12:08,040
I don't know how this will run.

187
00:12:08,050 --> 00:12:08,740
Let's run this.

188
00:12:08,860 --> 00:12:11,710
And if it fails, we will debug and fix the issue.

189
00:12:12,070 --> 00:12:12,430
OK.

190
00:12:16,930 --> 00:12:18,770
Awesome, guys, I think it worked.

191
00:12:19,690 --> 00:12:20,260
You see that?

192
00:12:21,540 --> 00:12:28,680
Connection successful, and it is successfully added and bookies also successfully deleted, OK, this

193
00:12:28,680 --> 00:12:35,020
insecure request warning is related to last, but verify equals to false as we are suppressing SSL connection.

194
00:12:35,150 --> 00:12:36,180
Is just giving us warning.

195
00:12:37,470 --> 00:12:38,010
All right.

196
00:12:38,010 --> 00:12:39,420
So this looks interesting.

197
00:12:39,990 --> 00:12:43,970
So the new it created is A, B, C and four, three, four, three.

198
00:12:43,980 --> 00:12:45,410
Let's see if it is the right one.

199
00:12:46,370 --> 00:12:52,220
I tolerate any any combination of ISBN, and I'll.

200
00:12:53,000 --> 00:12:53,570
What is that?

201
00:12:54,200 --> 00:12:55,700
Oh, let me call this again.

202
00:12:57,100 --> 00:12:58,990
Is that FBC for three?

203
00:13:00,860 --> 00:13:08,930
Four, three and 43, Purrfect, so this is the water we have successfully added and now that table,

204
00:13:08,930 --> 00:13:13,250
whatever you added, is dynamic and there is no one here.

205
00:13:13,640 --> 00:13:14,950
Do we have those values here?

206
00:13:14,950 --> 00:13:21,370
Nothing disconnected to our database through our python mystical connecter extract.

207
00:13:21,440 --> 00:13:27,980
That value created the dictionary on flight and sent to this dictionary to your best and this and go

208
00:13:28,160 --> 00:13:30,840
back to Gissen and then is submitted to the AP.

209
00:13:31,100 --> 00:13:38,510
That is how we will have to build integrated solution talking starting from your database and to your

210
00:13:38,990 --> 00:13:39,310
best.

211
00:13:39,650 --> 00:13:43,700
OK, and we have smartly done that by building a lot of utilities.

212
00:13:44,240 --> 00:13:49,790
OK, so I hope you noticed that we have not hardcourt anything, any of it.

213
00:13:50,120 --> 00:13:52,400
Everything is driven externally from this.

214
00:13:52,880 --> 00:13:57,320
So you can use this project, it's available for download from next lecture.

215
00:13:58,070 --> 00:14:04,370
You can download it and you can leverage this, OK, it's up to your imagination so you can create some

216
00:14:04,370 --> 00:14:07,640
tables in your database, call them and try to use them in.

217
00:14:07,640 --> 00:14:10,690
Maybe just play it on according to your imagination.

218
00:14:11,090 --> 00:14:16,760
But as I said, in real time, this is how things will work if you are going with python automation

219
00:14:16,760 --> 00:14:17,690
for and stuff.

220
00:14:18,770 --> 00:14:19,990
OK, guys, thank you.
