1
00:00:00,940 --> 00:00:01,660
Welcome back.

2
00:00:02,110 --> 00:00:09,340
So now let's try to remove this and point from here, ideally, this is the common end point, which

3
00:00:09,340 --> 00:00:11,650
should come from your global properties level.

4
00:00:12,270 --> 00:00:16,570
OK, so you will test your API in different environments, right?

5
00:00:16,620 --> 00:00:22,810
So sometimes you're tested in a new environment and then once you're deployed in the environment, then

6
00:00:22,820 --> 00:00:29,560
you will have another endpoint because APIs and that environment will be hosted on another server and

7
00:00:29,560 --> 00:00:30,810
then you will move to Prague.

8
00:00:31,000 --> 00:00:35,830
And if you want to test this APIs in Prague and probably will have another environment.

9
00:00:36,190 --> 00:00:40,650
So basically this will change based upon which environment you run your aviator's.

10
00:00:40,930 --> 00:00:46,900
So this should be globally driven so that, you know, you can change any time the value of it, so

11
00:00:46,900 --> 00:00:49,530
that it will update all your best guesses.

12
00:00:49,780 --> 00:00:56,770
OK, so to do that, I will introduce a new concept called Config Parser in Python.

13
00:00:57,020 --> 00:01:04,840
OK, so basically you can create all your global properties in one file with the DOT I and I extension.

14
00:01:05,700 --> 00:01:07,860
So let me show you that for that.

15
00:01:12,360 --> 00:01:19,140
I will actually create one package and move all the utilities to OK, so that way it would be easy for

16
00:01:19,140 --> 00:01:29,190
us slightly new and we would say on package utilities.

17
00:01:31,780 --> 00:01:40,240
OK, so inside the theater, ladies, I will create new file, and I would call it as properties, these

18
00:01:40,240 --> 00:01:41,600
are basically global properties.

19
00:01:41,890 --> 00:01:44,230
Make sure you give an extension.

20
00:01:46,570 --> 00:01:52,960
All right, so there are some plug ins available, but we don't really care about those because it's

21
00:01:52,960 --> 00:01:55,780
just a simple property values adding.

22
00:01:56,750 --> 00:02:03,210
So first of all, you have to give what kind of properties you are providing.

23
00:02:03,440 --> 00:02:04,730
So give any random name.

24
00:02:04,730 --> 00:02:11,300
In our case we are talking about apples, OK, tomorrow you might have a school related properties.

25
00:02:11,810 --> 00:02:15,920
And after a few sections, I will introduce How to Connect to Linux server.

26
00:02:16,130 --> 00:02:18,420
At the time, you will have other properties.

27
00:02:19,100 --> 00:02:24,360
So here also you will have a post where you are hosting Eurabia in secret.

28
00:02:24,380 --> 00:02:27,340
Also you will have another property called host.

29
00:02:28,220 --> 00:02:33,130
OK, basically you can identify the host of Yapper with its section.

30
00:02:33,150 --> 00:02:33,460
Mmm.

31
00:02:33,770 --> 00:02:34,860
So this is one section.

32
00:02:34,880 --> 00:02:35,810
This is one section.

33
00:02:35,810 --> 00:02:36,920
And this is another section.

34
00:02:37,220 --> 00:02:40,130
So each section is identified with the square brackets like this.

35
00:02:40,460 --> 00:02:47,390
OK, so in our case, let's say we have an endpoint here and point any variable endpoint equals two.

36
00:02:47,900 --> 00:02:50,530
And that endpoint, we have another example.

37
00:02:50,540 --> 00:02:50,840
Right.

38
00:02:50,870 --> 00:02:52,300
So let's copy it from here.

39
00:02:53,550 --> 00:02:55,270
And that's it.

40
00:02:55,470 --> 00:02:58,520
So right now, we don't have any sequel properties.

41
00:02:58,920 --> 00:03:02,040
We will soon iron all these properties in coming later.

42
00:03:02,050 --> 00:03:04,020
So let's remove this, OK?

43
00:03:05,050 --> 00:03:14,080
So if this data and I find out some now come back to your actual post API example, so instead of writing

44
00:03:14,080 --> 00:03:17,040
that code here, I will go back to you.

45
00:03:17,140 --> 00:03:17,650
That's.

46
00:03:18,940 --> 00:03:22,720
But I remember we have creator impeller, right?

47
00:03:24,510 --> 00:03:25,910
Where are we using this?

48
00:03:25,950 --> 00:03:29,850
This is not required, let me delete this, I don't know from where this came from.

49
00:03:32,450 --> 00:03:39,530
Yeah, payloaders are here, so I will create another python file in the same utilities package.

50
00:03:39,800 --> 00:03:45,200
I'm just trying to have multiple files that's on and inside here, I would say.

51
00:03:48,690 --> 00:03:49,770
Configurations.

52
00:03:50,890 --> 00:03:51,990
This one by Dunfee.

53
00:03:55,670 --> 00:04:01,580
All right, so basically, I created one simple Python package, insert this, there is one file with

54
00:04:01,880 --> 00:04:04,640
an extension and another file with configurations.

55
00:04:04,910 --> 00:04:08,420
I will later come into this file and I use the code first.

56
00:04:08,420 --> 00:04:15,620
We will understand directly how to bring that endpoint exactly to here without hard coding, OK?

57
00:04:15,770 --> 00:04:16,940
I will remove it from here.

58
00:04:17,390 --> 00:04:24,200
And there is one package in Python which unit to import import config parser.

59
00:04:24,530 --> 00:04:28,030
So this is the package by default available in Python.

60
00:04:28,190 --> 00:04:33,870
So let's import that first and then this is the package right in this packet.

61
00:04:34,510 --> 00:04:38,800
So D'Arte and then you have a method called config parser like.

62
00:04:40,030 --> 00:04:40,540
Now.

63
00:04:42,220 --> 00:04:45,900
Let's push this into one real conflict, right?

64
00:04:46,150 --> 00:04:47,500
So now this variable.

65
00:04:48,580 --> 00:04:54,700
Is created and this variable can drive all your config, any files, but we don't know where exactly

66
00:04:54,700 --> 00:04:56,540
the EMI files are located.

67
00:04:56,740 --> 00:04:58,700
So we have to say config.

68
00:04:58,900 --> 00:05:01,060
So this is the object responsible to do that?

69
00:05:01,060 --> 00:05:01,320
Right.

70
00:05:01,660 --> 00:05:09,370
Because from this method, you created an object and this object d'art and you have a file called Read

71
00:05:09,550 --> 00:05:14,460
and you have to give the part of that file where exactly what properties file is present.

72
00:05:14,980 --> 00:05:16,060
So it's present here.

73
00:05:16,090 --> 00:05:16,510
So right.

74
00:05:16,510 --> 00:05:27,220
Click copy related part and you can just sit here and this way you want a config file can be read by

75
00:05:27,220 --> 00:05:27,930
this object.

76
00:05:28,180 --> 00:05:34,000
So it has no knowledge about all the values present in this property.

77
00:05:34,000 --> 00:05:35,110
Start and file.

78
00:05:35,590 --> 00:05:42,100
OK, so to do that first you have to import this config pastor packet and from this package you need

79
00:05:42,100 --> 00:05:43,090
to call this method.

80
00:05:43,330 --> 00:05:49,360
And once you create object out of it from that, you need to call this rate method which will read the

81
00:05:49,370 --> 00:05:50,340
properties file.

82
00:05:50,770 --> 00:05:56,260
OK, so one set right now, you can directly write and call that end point like this.

83
00:05:56,680 --> 00:05:58,090
So this is the object, right?

84
00:05:58,360 --> 00:06:02,790
Object first, which section you want to access.

85
00:06:03,070 --> 00:06:05,560
I told you there can be multiple sections here, right.

86
00:06:05,590 --> 00:06:07,960
So right now we have only one section called API.

87
00:06:08,650 --> 00:06:10,960
So config open.

88
00:06:12,130 --> 00:06:14,620
How one square bracket AIPA.

89
00:06:16,160 --> 00:06:22,460
And then if you give the step that will directly access the section and insert the section, you need

90
00:06:22,460 --> 00:06:23,860
to access end point, right?

91
00:06:24,980 --> 00:06:27,960
So can't Faye AIPA, Colin.

92
00:06:29,260 --> 00:06:30,550
For Sonny.

93
00:06:36,660 --> 00:06:37,270
And that's it.

94
00:06:37,500 --> 00:06:43,200
So let's separate this value from your actual string with plus.

95
00:06:47,480 --> 00:06:54,680
Perfect, you see that, so this is the man, 30, who have written config of AIPA of End Point.

96
00:06:54,980 --> 00:07:00,590
When you say config of Apria, it will first see what file I have to go as you have already given this

97
00:07:00,590 --> 00:07:01,280
property does.

98
00:07:01,350 --> 00:07:04,990
And it will go inside and it will search for apperception.

99
00:07:05,480 --> 00:07:09,720
Yes, it found it and then it will immediately look for endpoint.

100
00:07:09,740 --> 00:07:10,880
That's what you provided here.

101
00:07:11,270 --> 00:07:17,480
So this is the end point so that it will directly access this value from here and it would place in

102
00:07:17,480 --> 00:07:18,830
this area earlier.

103
00:07:18,830 --> 00:07:19,820
It has to be history.

104
00:07:19,820 --> 00:07:20,900
DP to sixteen point.

105
00:07:20,910 --> 00:07:21,150
Right.

106
00:07:21,440 --> 00:07:23,160
So that will be replaced with this.

107
00:07:23,300 --> 00:07:29,570
So a trying time, whatever value you provide here that will fall here and then after it will be concatenated

108
00:07:29,570 --> 00:07:30,440
with your stuff.

109
00:07:30,440 --> 00:07:32,420
String with Pless operator.

110
00:07:32,690 --> 00:07:35,910
OK, you can separate a variable and string that plus operator.

111
00:07:35,920 --> 00:07:36,120
Right.

112
00:07:36,410 --> 00:07:37,510
So that's how we handle it.

113
00:07:37,760 --> 00:07:39,260
And now you run the test.

114
00:07:39,260 --> 00:07:44,650
It should be same and behave like whatever we have done previously, ok.

115
00:07:47,650 --> 00:07:51,620
You see that everything the same book is added book is successfully deleted.

116
00:07:51,850 --> 00:07:57,430
So that means we have successfully created a global properties and we are driving it from there.

117
00:07:57,820 --> 00:08:00,090
Now, let's see if I change that.

118
00:08:00,130 --> 00:08:01,270
Any value to 40.

119
00:08:02,020 --> 00:08:05,810
Obviously, at this point, we don't have our API.

120
00:08:06,160 --> 00:08:10,510
So if I tried to run this again, this will throw another.

121
00:08:11,720 --> 00:08:12,370
Still running.

122
00:08:13,480 --> 00:08:16,720
So you can guess that there is something wrong, right?

123
00:08:16,750 --> 00:08:23,530
You'll see that it clearly told you that we are trying to reach, but there is no you are still exist.

124
00:08:23,530 --> 00:08:25,630
And that server perfect.

125
00:08:25,670 --> 00:08:34,540
Now, you understood how to drive the values globally, but why should I write all these code in my

126
00:08:34,540 --> 00:08:35,430
actual test?

127
00:08:35,680 --> 00:08:36,990
Is this not overhead?

128
00:08:37,420 --> 00:08:39,850
So let me remove it here.

129
00:08:40,820 --> 00:08:47,660
And then we will go to another file, which we just created configurations, so here we will try to

130
00:08:47,720 --> 00:08:52,790
have that matter and just call that method directly there so that we can avoid some code.

131
00:08:52,910 --> 00:08:56,140
Isn't it here?

132
00:08:56,210 --> 00:09:00,560
I can write a letter, get config about Mahtani.

133
00:09:03,980 --> 00:09:06,860
And then return this config variable.

134
00:09:10,070 --> 00:09:12,060
Right, so you need to import.

135
00:09:14,170 --> 00:09:15,160
Config Pozza.

136
00:09:20,680 --> 00:09:23,220
OK, you need to get one more blank line.

137
00:09:24,400 --> 00:09:27,730
And that will go away, reformatories file.

138
00:09:28,750 --> 00:09:34,390
Everything looks good, so you can import this package into your.

139
00:09:35,950 --> 00:09:36,910
Actually test.

140
00:09:39,270 --> 00:09:39,840
From.

141
00:09:41,530 --> 00:09:43,060
Configurations.

142
00:09:46,000 --> 00:09:52,120
While imports stopped, but configurations package is present and utilities like.

143
00:09:53,430 --> 00:09:54,690
From utilities.

144
00:10:00,620 --> 00:10:05,060
OK, so this conflict right now, it's showing another because you don't have that, so you can now

145
00:10:05,060 --> 00:10:12,620
create conflict equals to get conflict.

146
00:10:14,170 --> 00:10:15,230
OK, gone.

147
00:10:15,480 --> 00:10:22,170
All you can directly call this get configurator here to air this stuff, Basswood Patrick.

148
00:10:23,000 --> 00:10:30,920
You see that now it was more simple than get config of API endpoint and then it will give the results.

149
00:10:31,160 --> 00:10:37,670
OK, so let me run one more time and make sure nothing is breaking after we have done this optimization.

150
00:10:39,590 --> 00:10:42,530
Awesome, so looking at it and successfully deleted, great.

151
00:10:43,340 --> 00:10:45,110
So next thing is the resources.

152
00:10:45,440 --> 00:10:51,110
So you have given advocate resources here and the resources here in real time, you will have a number

153
00:10:51,110 --> 00:10:53,560
of apps and a number of resources for that.

154
00:10:53,810 --> 00:10:57,450
So you should drive all those again from externally, from any class.

155
00:10:57,950 --> 00:11:02,990
So in the next lecture, let's create one class and declare all these resources there and we will call

156
00:11:02,990 --> 00:11:05,550
it from that class to our actual test.

157
00:11:06,170 --> 00:11:12,380
So these are all required to make your test more optimized in framework.

158
00:11:12,380 --> 00:11:19,300
Standard config parser classes and payloads should come from external file then only the court looks

159
00:11:19,310 --> 00:11:20,130
a standard way.

160
00:11:20,480 --> 00:11:25,060
OK, if you just have standalone court tomorrow, if you want to do any more, you will see.

161
00:11:25,070 --> 00:11:31,730
And if you want to show to your project team, if you have a standalone code like this, then that won't

162
00:11:31,730 --> 00:11:32,100
be good.

163
00:11:32,360 --> 00:11:37,670
So if you make all these optimizations and show how all these are derived from external sources, then

164
00:11:37,670 --> 00:11:39,620
that would be very impressive.

165
00:11:39,800 --> 00:11:40,690
All right.

166
00:11:40,700 --> 00:11:41,900
We'll see that in our next lecture.

167
00:11:42,290 --> 00:11:42,800
Thank you.
