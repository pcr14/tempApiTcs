1
00:00:01,090 --> 00:00:07,540
All right, so these are the global properties, host, database, user and password, so those should

2
00:00:07,540 --> 00:00:10,270
be driven from this property is not identified.

3
00:00:10,930 --> 00:00:16,720
OK, so those should not be hardcoded in want test on any python face because these are global and should

4
00:00:16,720 --> 00:00:17,410
come from here.

5
00:00:17,800 --> 00:00:19,660
So let me create another section.

6
00:00:21,820 --> 00:00:22,060
OK.

7
00:00:22,330 --> 00:00:23,810
This stands for sequel.

8
00:00:24,280 --> 00:00:32,020
So here you can start writing the user password and the database, which you want to connect and the

9
00:00:32,020 --> 00:00:35,090
four students, so everything we can derive it from here.

10
00:00:35,680 --> 00:00:37,690
So let me quickly copy all of this.

11
00:00:39,050 --> 00:00:39,980
Localhost.

12
00:00:41,120 --> 00:00:43,550
And databases fighting automation.

13
00:00:46,100 --> 00:00:47,210
And for.

14
00:00:53,420 --> 00:00:57,570
Like, so, however, all these configurations should come from here.

15
00:00:57,590 --> 00:01:05,360
Nice and connection related stuff also ideally should not be in you were actually testified, so they

16
00:01:05,360 --> 00:01:07,730
should come from another utilities file.

17
00:01:08,330 --> 00:01:16,850
So to make that happen, we will write one utility method which will start connection to your database

18
00:01:17,120 --> 00:01:22,900
so that any tests can simply call that method to have connection into the test.

19
00:01:22,970 --> 00:01:23,260
Right.

20
00:01:23,960 --> 00:01:27,250
So to do that, I will copy this.

21
00:01:27,920 --> 00:01:30,190
I think we have properties.

22
00:01:30,200 --> 00:01:31,340
Configurations, right.

23
00:01:31,950 --> 00:01:32,140
Right.

24
00:01:32,210 --> 00:01:34,910
Sort of get Conexion.

25
00:01:39,280 --> 00:01:44,020
And you can buy something like this, but here.

26
00:01:45,190 --> 00:01:47,080
It has to import my sequel.

27
00:01:48,180 --> 00:01:56,790
Make sure you import my sequel, Dark Connectors, like and these details, it's a very long string,

28
00:01:56,790 --> 00:01:57,060
right?

29
00:01:57,480 --> 00:02:03,110
One good thing about this kind of metal is that it accepts a dictionary.

30
00:02:03,660 --> 00:02:03,970
Right.

31
00:02:04,260 --> 00:02:05,120
So let's do one thing.

32
00:02:05,130 --> 00:02:09,960
Let's create one big snoddy variable and assign all these values in that dictionary.

33
00:02:10,170 --> 00:02:13,580
And you can simply write the dictionary variable limb here.

34
00:02:13,890 --> 00:02:16,590
So instead of writing all these details here.

35
00:02:17,040 --> 00:02:18,030
OK, let me show you.

36
00:02:18,420 --> 00:02:24,870
It should be very simple and that is the very clean way of writing and establishing Thinkwell connection

37
00:02:24,870 --> 00:02:25,440
in Python.

38
00:02:26,360 --> 00:02:30,410
And so we would quickly create one big study variable.

39
00:02:30,530 --> 00:02:32,510
I'll do it on the top.

40
00:02:33,780 --> 00:02:41,520
So let's connect config so you know how to create a dictionary.

41
00:02:42,450 --> 00:02:43,860
So this is a simple syntax.

42
00:02:43,890 --> 00:02:45,120
This is an empty dictionary.

43
00:02:46,870 --> 00:02:52,300
Right now, inservice, let's start writing Yuzu is the first one, I guess.

44
00:02:55,690 --> 00:03:01,330
User column and give the value and what is the user value?

45
00:03:01,600 --> 00:03:10,360
So basically the value is broad, but that value we thought of driving it from our properties start

46
00:03:10,600 --> 00:03:10,950
and.

47
00:03:11,160 --> 00:03:11,350
File.

48
00:03:11,360 --> 00:03:11,590
Right.

49
00:03:12,130 --> 00:03:14,530
So get config will give you the.

50
00:03:15,580 --> 00:03:18,310
Actual config access, so.

51
00:03:19,790 --> 00:03:20,870
Get config.

52
00:03:22,110 --> 00:03:29,280
S. is a sequel in sequel S. Earlier, we have given absolution and then.

53
00:03:30,440 --> 00:03:36,890
User user is the guy you need, they so user is the guy and siecle is a section.

54
00:03:38,090 --> 00:03:40,970
So create function, it's already dead, right?

55
00:03:42,570 --> 00:03:48,660
Oh, it should be on the top, so basically it should be before that so that it can detect you see that

56
00:03:48,660 --> 00:03:49,350
at Krischan.

57
00:03:50,830 --> 00:03:55,390
OK, so this is how you got to use it, and next is a password.

58
00:03:56,980 --> 00:03:57,610
Password?

59
00:04:00,060 --> 00:04:01,020
And the same.

60
00:04:02,490 --> 00:04:08,550
So basically, you are creating one big snotty object that said all the details you can pass as a dictionary

61
00:04:08,580 --> 00:04:12,990
object and you can simply passed this dictionary very and said this instead of giving all this.

62
00:04:16,630 --> 00:04:17,350
Password.

63
00:04:18,730 --> 00:04:21,850
And next is the host host.

64
00:04:33,280 --> 00:04:35,550
Is a database state database.

65
00:04:39,440 --> 00:04:44,850
It's up to you if you want to drive database from externally or if you can hardcoded it directly here.

66
00:04:45,410 --> 00:04:46,200
Anything is fine.

67
00:04:46,220 --> 00:04:50,240
It depends upon your project related process.

68
00:04:50,600 --> 00:04:56,270
OK, if you are project have multiple databases, then you can't use it in global property here.

69
00:04:56,270 --> 00:04:59,180
Right, because some test may use another database.

70
00:04:59,180 --> 00:05:03,760
And if you globally like it, everyone are forced to use this database only.

71
00:05:04,070 --> 00:05:04,880
So it depends.

72
00:05:05,030 --> 00:05:09,630
If you think there is a specific database for every test, then don't like it here.

73
00:05:09,650 --> 00:05:11,240
You can drive it from your test.

74
00:05:11,900 --> 00:05:14,030
So let's assume here we have only one database.

75
00:05:14,930 --> 00:05:20,140
OK, so you created one simple dictionary variable or you can safely study object.

76
00:05:20,480 --> 00:05:26,720
So in that key value based on that user password Holston database, basically these four values we are

77
00:05:26,720 --> 00:05:27,210
giving here.

78
00:05:27,220 --> 00:05:27,460
Right.

79
00:05:28,130 --> 00:05:35,660
Instead you can create a dictionary like this and you can simply provide the dictionary variable here

80
00:05:36,380 --> 00:05:36,950
and that's it.

81
00:05:37,250 --> 00:05:38,680
So you need to give to stats.

82
00:05:38,960 --> 00:05:44,300
So that will clearly tell that whatever argument I have is nothing but a dictionary.

83
00:05:44,660 --> 00:05:47,790
OK, so that is a representation which will help you to identify.

84
00:05:48,410 --> 00:05:51,020
You see that how clean your code is.

85
00:05:51,680 --> 00:05:57,950
So earlier you have everything here and you have a dictionary and in that big study, so you don't have

86
00:05:57,950 --> 00:05:58,790
actual values.

87
00:05:59,030 --> 00:06:01,670
Those are smartly driven from you were not.

88
00:06:01,790 --> 00:06:02,870
I am a global fight.

89
00:06:03,320 --> 00:06:03,600
Right.

90
00:06:03,860 --> 00:06:06,640
So this is how we have segregated everywhere.

91
00:06:07,130 --> 00:06:09,020
So that you have written in modules.

92
00:06:11,350 --> 00:06:18,130
Now, so you have the right, I guess, mechanism here, because if something fails, you should know

93
00:06:18,140 --> 00:06:18,660
what is that?

94
00:06:19,540 --> 00:06:20,770
So for that, let's say.

95
00:06:20,870 --> 00:06:21,190
Right.

96
00:06:22,150 --> 00:06:25,840
So basically, this is the meter perimeter will run this.

97
00:06:27,420 --> 00:06:28,540
According indentation.

98
00:06:30,690 --> 00:06:35,400
And here we can see if connection is there or not is connected.

99
00:06:37,810 --> 00:06:38,650
Then print.

100
00:06:40,210 --> 00:06:46,390
Connection, successful, something like this, we are writing some logs to understand.

101
00:06:48,710 --> 00:06:49,760
Successful.

102
00:06:51,790 --> 00:06:53,530
What if it fails?

103
00:06:54,820 --> 00:07:02,740
So let's also return this connection so that any file can call this method so they will have access

104
00:07:02,740 --> 00:07:09,100
to this connection variable which you created here so you can simply return gone so that, you know,

105
00:07:09,160 --> 00:07:10,640
they can access this connection.

106
00:07:11,230 --> 00:07:11,950
So that is the one.

107
00:07:12,550 --> 00:07:18,090
And next, whenever you write right, then you should write gatch mechanism as well.

108
00:07:18,460 --> 00:07:22,900
So in Python, Katz will be written as except OK.

109
00:07:22,960 --> 00:07:26,300
And this mystique will throws it up.

110
00:07:26,620 --> 00:07:26,800
Right.

111
00:07:26,950 --> 00:07:31,850
If it connection is not there, it will try not to understand that error.

112
00:07:31,870 --> 00:07:36,560
You need to import one package because using that package only you can retrieve that error.

113
00:07:37,210 --> 00:07:39,910
So once you import this package from this package.

114
00:07:39,910 --> 00:07:41,650
My sequel, Dart Connector.

115
00:07:44,010 --> 00:07:48,030
There is one method we can say import al.

116
00:07:49,170 --> 00:07:55,380
So this mother will help you to give the details of what exactly went wrong, so that will not present

117
00:07:55,380 --> 00:07:56,020
by default.

118
00:07:56,040 --> 00:08:00,560
You have to import it and that will be available for you.

119
00:08:01,690 --> 00:08:04,120
So except Aaron, AC.

120
00:08:05,550 --> 00:08:06,800
And you can print that.

121
00:08:08,820 --> 00:08:15,000
So basically now if something goes wrong here and this adult object can read and understand what is

122
00:08:15,000 --> 00:08:20,390
the reason for connection, failure because, look, if it fails, then only it will go to Gatesville,

123
00:08:20,550 --> 00:08:20,790
right?

124
00:08:21,210 --> 00:08:23,070
So this will get the error.

125
00:08:23,070 --> 00:08:27,690
And you are printing that error as reference so you can see it in the output.

126
00:08:27,690 --> 00:08:29,360
What exactly it went wrong?

127
00:08:31,050 --> 00:08:32,200
All right, guys, so that's it.

128
00:08:32,220 --> 00:08:38,070
So you have successfully implemented prickish mechanism and remember, you are returning your connection

129
00:08:38,070 --> 00:08:39,930
object so that anyone can use it.

130
00:08:40,140 --> 00:08:41,670
So that's the overall point here.

131
00:08:42,030 --> 00:08:43,980
So what is the matter here?

132
00:08:44,010 --> 00:08:45,660
Remove trailing Blackland, OK.

133
00:08:46,510 --> 00:08:49,130
So you have successfully created one good connection method.

134
00:08:50,010 --> 00:08:57,550
OK, so now let's go back to our file and here I will come on this.

135
00:09:01,840 --> 00:09:08,200
So basically, you have this connection object from that method as well, right?

136
00:09:08,230 --> 00:09:12,260
What does that mean that any resources is?

137
00:09:14,070 --> 00:09:14,810
Good connection.

138
00:09:19,840 --> 00:09:22,420
Get connection and you have to import.

139
00:09:24,760 --> 00:09:26,350
So from utilities.

140
00:09:27,800 --> 00:09:36,160
We want to import all so that this connection will also come into picture that your utilities start

141
00:09:36,170 --> 00:09:39,230
configurations is our final name, right?

142
00:09:39,960 --> 00:09:45,360
OK, so you can store that connection because we are returning the connection object, isn't it?

143
00:09:45,380 --> 00:09:49,030
So when you go to get connection method, so here we are redoing the connection.

144
00:09:49,250 --> 00:09:51,520
So that will be cast directly here.

145
00:09:51,860 --> 00:09:54,170
And you need not worry about all these details.

146
00:09:54,440 --> 00:09:58,820
All the details have been already taken care and get connection.

147
00:09:59,360 --> 00:10:05,030
And they are coming from that extended here and from this study we are bringing from my friend.

148
00:10:05,240 --> 00:10:07,040
So this is how you can segregate.

149
00:10:07,340 --> 00:10:11,260
And now when you run this file again, that will not have any errors.

150
00:10:11,570 --> 00:10:15,160
So just to make sure this is a real test, you're going to have a solution.

151
00:10:15,470 --> 00:10:17,110
So some is 361, right?

152
00:10:17,120 --> 00:10:21,770
You can simply assert some if you have anywhere that you are.

153
00:10:22,280 --> 00:10:27,500
If you're not already the total is 361, then you can compare like this so that if something is wrong,

154
00:10:27,770 --> 00:10:28,730
your test will fit.

155
00:10:33,560 --> 00:10:39,110
All right, so there is another human type object use connector line number eight.

156
00:10:40,010 --> 00:10:40,510
Oops.

157
00:10:40,550 --> 00:10:46,670
So user is rude here, not local post host is a local host, user is a rude password is place at the

158
00:10:46,670 --> 00:10:47,120
academy.

159
00:10:47,720 --> 00:10:53,450
So now I come back to my python file and now I will run this.

160
00:10:54,670 --> 00:11:01,180
That so that it has to be same, just like how they have run previously, but with configuration changes

161
00:11:01,180 --> 00:11:03,310
as we are driving it from external face.

162
00:11:04,800 --> 00:11:12,570
Let's see, you see that 361 same result, nothing fell and then also passed and we have smartly driving

163
00:11:12,570 --> 00:11:14,520
all these connections externally.

164
00:11:14,850 --> 00:11:18,900
So this is how you need to optimize it without using all the details here.

165
00:11:19,680 --> 00:11:28,530
So with this knowledge, let's go back to our API test and there we are to hardcoded our payload.

166
00:11:28,830 --> 00:11:32,580
So if you go back to your payload file, this is how we have given.

167
00:11:32,580 --> 00:11:32,850
Right.

168
00:11:33,150 --> 00:11:37,430
And now there is a table for us which gives us the book's details.

169
00:11:38,250 --> 00:11:45,390
So let's take one draw from this table and then we will build it this, this and dynamically and push

170
00:11:45,390 --> 00:11:51,000
it to our API request so that we can conclude this database plus API integration.

171
00:11:51,330 --> 00:11:53,250
OK, we'll start that from our next letter.

172
00:11:53,700 --> 00:11:54,210
Thank you.
